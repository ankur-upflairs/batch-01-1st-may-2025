advantage ->

->client side rendering -> SPA -> single page application
->component based architecture -> small pieces of ui 
-> code structured -> big code can be manage easily
-> fast -> virtual dom ->light weight replica of actual dom 

disadvantage -> 
in csr -> this is not seo friendly 
-> initial load time high  

npm create vite@latest
-> project-name -> framwork (react) -> varient (js)

folder structure-->
README.md -> project details file
vite.config.js -> vite's configuration file 
eslint.config.js -> eslint configuration 
.gitignore -> file have name that should not be uploaded to github 
index.html -> entry point of our app
src -> our code (app) 
public -> static assests (css, images )
package.json -> it has details about project like dependenceis

npm i -> install all dependencies in node_modules folder
package-lock.json -> all details of dependencies

-> npm run dev -> to start the server


 What is JSX?
JSX stands for JavaScript XML.

It is a syntax extension for JavaScript used with React to describe what the UI should look like.

JSX lets you write HTML-like code inside JavaScript.

const element = <h1>Hello, world!</h1>;
This looks like HTML, but it's actually JavaScript!


ðŸ”¹ Basic Rules of JSX
Here are some simple rules to follow:

1. One Parent Element
You must return a single parent element.
2. Use className Instead of class
In HTML you write class, but in JSX use className.

3. Use camelCase for Attributes
JSX uses camelCase for attributes.

<input type="text" autoFocus={true} />

5. Self-Closing Tags
Tags with no content must be self-closing.

<img src="logo.png" alt="Logo" />
<br />

4. JavaScript Inside JSX Uses {}
You can insert JavaScript expressions using curly braces {}.


const name = "John";
return <h1>Hello, {name}</h1>;

-------------------------------------------
ðŸ”¹ What is a Functional Component?
A JavaScript function that returns JSX.

Used to create UI components in React.

Preferred approach in modern React.

ðŸ”¹ Rules of Functional Components
Must be a function (regular or arrow function).

Component name must start with a capital letter.

Must return JSX or null.

Can accept props as arguments.

Can use React Hooks like useState, useEffect, etc.

Should be pure (same output for same input, no side effects).

ðŸ”¹ Uses of Functional Components
Build reusable UI elements.

Display data passed via props.

Manage local state using hooks.

Perform side effects with hooks.

Structure the app into smaller components for maintainability.



